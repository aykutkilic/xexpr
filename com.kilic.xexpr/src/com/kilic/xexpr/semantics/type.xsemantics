import com.kilic.xexpr.Expr
import com.kilic.xtype.TypeExpr
import com.kilic.xexpr.CastedExpr
import com.kilic.xexpr.BinaryOperation
import com.kilic.xexpr.BooleanLiteralExpr
import com.kilic.xexpr.NumberLiteralExpr
import com.kilic.xexpr.StringLiteralExpr
import com.kilic.xexpr.UnaryOperation
import com.kilic.xexpr.VarDecl
import com.kilic.xexpr.VariableRefLiteral
import com.kilic.xexpr.ClosureExpr
import com.kilic.xexpr.MemberFeatureCall
import com.kilic.xexpr.ReturnExpr
import com.kilic.xexpr.NullLiteralExpr
import com.kilic.xtype.XtypeFactory
import com.kilic.xtype.BooleanTypeExpr
import com.kilic.xtype.NumberTypeExpr

system com.kilic.xexpr.semantics.Types

inject XexprUtils utils

judgments {
	type |- Expr e : output TypeExpr
		error "Cannot Type" source e
		
	expect |> Expr e : TypeExpr t
		error "Expected " + t source e
	
	subtype |- TypeExpr t1 <: TypeExpr t2
		error "Type mismatch "
}

axiom TNull    G |- NullLiteralExpr    e : XtypeFactory::eINSTANCE.createNoneTypeExpr
axiom TBoolean G |- BooleanLiteralExpr e : XtypeFactory::eINSTANCE.createBooleanTypeExpr
axiom TString  G |- StringLiteralExpr  e : XtypeFactory::eINSTANCE.createStringTypeExpr
axiom TInteger G |- NumberLiteralExpr  e : utils.createNumberType(e.value)
axiom TCasted  G |- CastedExpr         e : e.typeExpr

axiom SNumToNum   G |- NumberTypeExpr t1 <: NumberTypeExpr  t2
axiom SBoolToNum  G |- NumberTypeExpr t1 <: BooleanTypeExpr t2

rule SSameType 
	G |- TypeExpr t1 <: TypeExpr t2
from {
	t1.class == t2.class
}

rule TBinaryOp
	G |- BinaryOperation e : TypeExpr t 
from {
	switch( e.operator ) {
		/*case ASSIGN:
			{G |- e.right : t}*/
		case IS_EQUAL,
		case NOT_EQUAL,
		case GREATER,
		case GREATER_OR_EQUAL,
		case LESS,
		case LESS_OR_EQUAL,
	
		case LOGIC_AND,
		case LOGIC_OR:
			t = XtypeFactory::eINSTANCE.createBooleanTypeExpr
		
		default: {
			var TypeExpr left
			var TypeExpr right
			{G |- e.left  :  left}
			{G |- e.right :  right}
			{G |- left    <: right}
			t = left
		}
	}
}

rule TUnaryOp
	G |- UnaryOperation e : TypeExpr t
from {
	switch(e.operator) {
		case LOGIC_NOT:
			// check integer or bool
			t = XtypeFactory::eINSTANCE.createBooleanTypeExpr
		
		case BINARY_NOT,
		case NEGATION,
		case POSITIVE,	
		case INCREMENT,
		case DECREMENT:
			// expect integer
			{ G |- e.expr : t }
	}
}

rule TVariableRef
	G |- VariableRefLiteral e : TypeExpr t
from {
	{ G |- e.^var : t }
}

rule TVarDecl
	G |- VarDecl e : TypeExpr t
from {
	if( e.type != null ) { 
		t = e.typeExpr // expect init
	} else if(e.init != null) {
		{ G |- e.init : t }
	}
}

rule TMember  
	G |- MemberFeatureCall  e : TypeExpr t 
from {
	t = e.^feature.getType // multiplicity not checked
}

rule TClosure
	G |- ClosureExpr e : TypeExpr t
from {
	G |- e.body : t
}

rule TReturn
	G |- ReturnExpr e : TypeExpr t
from {
	G |- e.expr : t
}