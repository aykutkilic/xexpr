package com.kilic.xtype

import com.kilic.xexpr.Expr
import com.kilic.xexpr.LiteralExpr
import com.kilic.xconcepts.PackageElement

enum DefinitionPhase {
	Precompile,
	Compile,
	Link,
	Runtime
}

interface Phased {
	DefinitionPhase defPhase
}

class PhasedString extends Phased {
	String value 
	contains Expr valueExpr
}

interface Named { contains PhasedString name }

class TypeDeclaration extends Named, PackageElement {
}

class TypeAlias extends TypeDeclaration {
	contains TypeExpr typeExpr
}

class TypeRef extends TypeExpr {
	refers TypeDeclaration ^type
}

abstract class TypeExpr {}

abstract class BuiltInTypeExpr extends TypeExpr {}

class NoneTypeExpr    extends BuiltInTypeExpr {}
class BooleanTypeExpr extends BuiltInTypeExpr {}
class StringTypeExpr  extends BuiltInTypeExpr { int length }

abstract class NumberTypeExpr extends BuiltInTypeExpr {}

class IntegerTypeExpr extends NumberTypeExpr {}
class RealTypeExpr extends NumberTypeExpr {}

class CompositeTypeExpr extends TypeExpr, TypeDeclaration {
	contains Attribute [] attributes
}

class Attribute extends TypeExpr, Named {
	contains TypeExpr ^type
}

class FunctionTypeExpr extends TypeExpr {
	contains TypeExpr ^return
	contains TypeExpr[] params
}

class CollectionTypeExpr extends TypeExpr {
	contains TypeExpr elementType
	contains Multiplicity ^multiplicity
}


// multiplicity
class Multiplicity {}

class MultOne 	    extends Multiplicity {}
class MultOptional  extends Multiplicity {}
class MultOneOrMore extends Multiplicity {}
class MultAny		extends Multiplicity {}
class MultExpr		extends Multiplicity {
	contains Expr expr
}


// object notation
class StructLiteralExpr extends LiteralExpr {
	contains AttributeAssignmentExpr [] attrValues
}

class AttributeAssignmentExpr {
	refers Attribute attribute
	contains Expr value
}
